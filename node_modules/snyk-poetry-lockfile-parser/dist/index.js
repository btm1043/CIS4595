"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildDepGraph = void 0;
const dep_graph_1 = require("@snyk/dep-graph");
const manifest = require("./manifest-parser");
const lockFile = require("./lock-file-parser");
function buildDepGraph(manifestFileContents, lockFileContents, includeDevDependencies = false) {
    const dependencyNames = manifest.getDependencyNamesFrom(manifestFileContents, includeDevDependencies);
    const packageDetails = manifest.pkgInfoFrom(manifestFileContents);
    const pkgSpecs = lockFile.packageSpecsFrom(lockFileContents);
    const builder = new dep_graph_1.DepGraphBuilder({ name: 'poetry' }, packageDetails);
    addDependenciesToGraph(dependencyNames, pkgSpecs, builder.rootNodeId, builder);
    return builder.build();
}
exports.buildDepGraph = buildDepGraph;
function addDependenciesToGraph(pkgNames, pkgSpecs, parentClientId, builder) {
    for (const pkgName of pkgNames) {
        addDependenciesFor(pkgName, pkgSpecs, parentClientId, builder);
    }
}
function addDependenciesFor(packageName, pkgSpecs, parentNodeId, builder) {
    // Poetry will auto-resolve dependencies with hyphens to dashes, but keep transitive reference name with underscore
    packageName = packageName.replace(/_/g, '-');
    const pkg = pkgLockInfoFor(packageName, pkgSpecs);
    if (!pkg) {
        throw new DependencyNotFound(packageName);
    }
    const pkgInfo = { name: packageName, version: pkg.version };
    builder
        .addPkgNode(pkgInfo, packageName)
        .connectDep(parentNodeId, packageName);
    addDependenciesToGraph(pkg.dependencies, pkgSpecs, packageName, builder);
}
function pkgLockInfoFor(packageName, pkgSpecs) {
    return pkgSpecs.find((lockItem) => {
        return lockItem.name.toLowerCase() === packageName.toLowerCase();
    });
}
class DependencyNotFound extends Error {
    constructor(pkgName) {
        super(`Unable to find dependencies in poetry.lock for package: ${pkgName}`);
        this.name = 'DependencyNotFound';
    }
}
//# sourceMappingURL=index.js.map