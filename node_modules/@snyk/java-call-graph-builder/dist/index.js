"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTargets = exports.runtimeMetrics = exports.getCallGraphGradle = exports.getCallGraphMvn = void 0;
const tslib_1 = require("tslib");
require("source-map-support/register");
const mvn_wrapper_1 = require("./mvn-wrapper");
const gradle_wrapper_1 = require("./gradle-wrapper");
const java_wrapper_1 = require("./java-wrapper");
const metrics_1 = require("./metrics");
const errors_1 = require("./errors");
const promisified_fs_glob_1 = require("./promisified-fs-glob");
const path = require("path");
function getCallGraphMvn(targetPath, timeout) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            const [classPath, targets] = yield Promise.all([
                metrics_1.timeIt('getMvnClassPath', () => mvn_wrapper_1.getClassPathFromMvn(targetPath)),
                metrics_1.timeIt('getEntrypoints', () => getTargets(targetPath, 'mvn')),
            ]);
            return yield metrics_1.timeIt('getCallGraph', () => java_wrapper_1.getCallGraph(classPath, targetPath, targets, timeout));
        }
        catch (e) {
            throw new errors_1.CallGraphGenerationError(e.userMessage ||
                'Failed to scan for reachable vulnerabilities. Please contact our support or submit an issue at https://github.com/snyk/java-call-graph-builder/issues. Re-running the command with the `-d` flag will provide useful information for the support engineers.', e);
        }
    });
}
exports.getCallGraphMvn = getCallGraphMvn;
function getCallGraphGradle(targetPath, timeout) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const [classPath, targets] = yield Promise.all([
            metrics_1.timeIt('getGradleClassPath', () => gradle_wrapper_1.getClassPathFromGradle(targetPath)),
            metrics_1.timeIt('getEntrypoints', () => getTargets(targetPath, 'gradle')),
        ]);
        return yield metrics_1.timeIt('getCallGraph', () => java_wrapper_1.getCallGraph(classPath, targetPath, targets, timeout));
    });
}
exports.getCallGraphGradle = getCallGraphGradle;
function runtimeMetrics() {
    return metrics_1.getMetrics();
}
exports.runtimeMetrics = runtimeMetrics;
function getTargets(targetPath, packageManager) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const targetFoldersByPackageManager = {
            mvn: 'target',
            gradle: 'build',
        };
        const targetDirs = yield promisified_fs_glob_1.glob(path.join(targetPath, `**/${targetFoldersByPackageManager[packageManager]}`));
        if (!targetDirs.length) {
            throw new errors_1.MissingTargetFolderError(targetPath, packageManager);
        }
        return targetDirs;
    });
}
exports.getTargets = getTargets;
//# sourceMappingURL=index.js.map